---

# To run: ansible-playbook -v -i localhost, deploy.yml

- hosts: 127.0.0.1
  connection: local
  sudo: false
  gather_facts: false
  vars_files:
    - "src/config/secrets.yml"
    - "src/config/vars.yml"
  tasks:

  # Common base resources

  - name: Create database and other base resources
    cloudformation:
      stack_name: "{{ deployment_id }}-base"
      state: "present"
      region: "{{ aws_region }}"
      template: "src/cloudformation-templates/base.template"
      template_parameters:
        DeploymentName: "{{ deployment_id }}"
    register: base_stack
    tags:
      - base

  - debug: msg="{{ base_stack.stack_outputs }}"
    tags:
      - base

  - name: Create S3 buckets
    s3: bucket={{ item }} mode=create region={{ aws_region }}
    with_items:
      - "{{ s3_artifactory_bucket }}"
      - "{{ s3_data_bucket }}"
    tags:
      - base

  # Lambda functions

  - name: Clean common build directory
    file: path={{ build_path }} state=absent

  - name: Create common build directories
    file: path={{ item }} state=directory mode=0755
    with_items:
      - "{{ build_path }}"
      - "{{ build_path }}/interfaces"
      - "{{ build_path }}/artifacts"

  - name: Configure function
    template: src=src/functions/{{ item.key }}/config.js.j2 dest=src/functions/{{ item.key }}/config.js mode=0644
    with_dict: functions

  - name: Package Lambda functions
    command: zip -FSr ../../../{{ build_path }}/artifacts/{{ item.key }}.zip . -i *
    args:
      chdir: src/functions/{{ item.key }}
    with_dict: functions

  - name: Sync packages to S3 artifactory
    command: aws s3 cp {{ build_path }}/artifacts s3://{{ s3_artifactory_bucket }}/artifacts/ --recursive --region {{ aws_region }}

  - name: Create Lambda functions
    cloudformation:
      stack_name: "{{ deployment_id }}-lambdas"
      state: present
      region: "{{ aws_region }}"
      template: src/cloudformation-templates/functions.template
      template_parameters:
        DeploymentName: "{{ deployment_id }}"
        ArtifactoryBucket: "{{ s3_artifactory_bucket }}"
    register: lambda_stack

  - name: Lambda function ARNs
    debug: msg="{{ lambda_stack.stack_outputs }}"

  - name: Reconfigure functions to use the latest code
    command: >
      aws lambda update-function-code 
      --function-name {{ lambda_stack.stack_outputs.get(item.key) }}
      --s3-bucket {{ s3_artifactory_bucket }} 
      --s3-key artifacts/{{ item.key }}.zip
    with_dict: functions

    # API Gateway interfaces

  - name: Configure interfaces
    template: src=src/interfaces/{{ item.key }}.yml.j2 dest={{ build_path }}/interfaces/{{ item.key }}.yml mode=0644
    with_dict: interfaces

  - name: Create interfaces
    command: >
      ./aws-api-import.sh
      --profile {{ aws_cli_profile }}
      --create 
      --deploy {{ interface_stage }}
      ../../{{ build_path }}/interfaces/{{ item.key }}.yml
    args:
      chdir: "{{ swagger_importer_path }}"
    with_dict: interfaces
    when: importer_mode == "create"
    register: importer_output

  - name: Print last output line of importer tool
    debug: msg="{{ importer_output.results[0].stdout_lines[-1:] }}"
    when: importer_mode == "create"

  - name: Update interface
    command: >
      ./aws-api-import.sh
      --profile {{ aws_cli_profile }}
      --update {{ interface_id }}
      --deploy {{ interface_stage }}
      ../../{{ build_path }}/interfaces/{{ interface_name }}.yml
    args:
      chdir: "{{ swagger_importer_path }}"
    when: importer_mode == "update"
    register: importer_output

  - name: Importer output
    debug: msg="{{ importer_output }}"
    when: importer_mode == "update"
